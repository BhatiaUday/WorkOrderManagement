default:
  image:
      name: "tokend/werf:0.0.11"
      entrypoint: [""]
  services:
        - name: docker:20-dind
          alias: docker
          command: ["--tls=false"]
  tags:
    - "tokend"

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  GITHUB_REF: $CI_COMMIT_SHA
  DH_IMAGE_NAME: $CI_PROJECT_ROOT_NAMESPACE/$CI_PROJECT_NAME
  SERVICE: $CI_PROJECT_NAME
  REGISTRY: registry.gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  IMAGE_NAME: $REGISTRY:$CI_COMMIT_SHA
  IMAGE_NAME_TAG: $REGISTRY:$CI_COMMIT_TAG
  WERF_LOG_COLOR_MODE: "on"
  WERF_IMAGES_REPO: $CI_REGISTRY_IMAGE
  WERF_BUILDAH_MODE: auto

.before_script_template: &before_script_templ
  before_script:
    - werf version
    - docker version
    - echo $CI_REGISTRY
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - echo $WERF_IMAGES_REPO
    - echo $WERF_ADD_CUSTOM_TAG_1

stages:
  - build-and-publish
  - lint-and-test
  #- publish
  #- deploy
  - cleanup

Build:
  stage: build-and-publish
  <<: *before_script_templ
  script:
    - type werf && source $(werf ci-env gitlab --as-file)
    - werf build --report-path=images-report.json
    - docker pull $(cat images-report.json | jq -r .Images.web.DockerImageName)
    - docker tag $(cat images-report.json | jq -r .Images.web.DockerImageName) $IMAGE_NAME
    - docker push $IMAGE_NAME
  except: [schedules]
  interruptible: true

Build Tag:
  stage: build-and-publish
  only:
    - tags
  <<: *before_script_templ
  script:
    - type werf && source $(werf ci-env gitlab --as-file)
    - werf build --report-path=images-report.json
    - docker pull $(cat images-report.json | jq -r .Images.web.DockerImageName)
    - docker tag $(cat images-report.json | jq -r .Images.web.DockerImageName) $IMAGE_NAME_TAG
    - docker push $IMAGE_NAME_TAG
  except: [schedules]
  interruptible: true

Lint and Test:
  stage: lint-and-test
  only:
    - merge_requests
  services:
    - docker:18-dind
  image:
    name: "registry.gitlab.com/tokend/devops/docker-containers:front14-8f59ce732e426d630f320b725dc514010e171fad"
    entrypoint: [""]
  script:
    - yarn install
    - yarn lint
  except: [schedules]
  interruptible: true


Cleanup:
  stage: cleanup
  <<: *before_script_templ
  script:
    - type werf && source $(werf ci-env gitlab --as-file)
    - docker login -u nobody -p ${WERF_IMAGES_CLEANUP_PASSWORD} ${WERF_IMAGES_REPO}
    - werf cleanup
  only: [schedules]
  interruptible: true
