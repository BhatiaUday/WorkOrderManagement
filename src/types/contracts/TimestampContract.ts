/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITimeStamping {
  export type ZKPPointsStruct = {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type ZKPPointsStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
  };

  export type SignerInfoStruct = {
    signer: PromiseOrValue<string>;
    isAddmitted: PromiseOrValue<boolean>;
    signatureTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type SignerInfoStructOutput = [string, boolean, BigNumber] & {
    signer: string;
    isAddmitted: boolean;
    signatureTimestamp: BigNumber;
  };

  export type DetailedStampInfoStruct = {
    isPublic: PromiseOrValue<boolean>;
    timestamp: PromiseOrValue<BigNumberish>;
    usersToSign: PromiseOrValue<BigNumberish>;
    usersSigned: PromiseOrValue<BigNumberish>;
    stampHash: PromiseOrValue<BytesLike>;
    signersInfo: ITimeStamping.SignerInfoStruct[];
  };

  export type DetailedStampInfoStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    ITimeStamping.SignerInfoStructOutput[]
  ] & {
    isPublic: boolean;
    timestamp: BigNumber;
    usersToSign: BigNumber;
    usersSigned: BigNumber;
    stampHash: string;
    signersInfo: ITimeStamping.SignerInfoStructOutput[];
  };
}

export interface TimestampContractInterface extends utils.Interface {
  functions: {
    "__TimeStamping_init(uint256,address,address)": FunctionFragment;
    "createStamp(bytes32,bool,address[],(uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "fee()": FunctionFragment;
    "getHashesByUserAddress(address)": FunctionFragment;
    "getStampHashByBytes(bytes)": FunctionFragment;
    "getStampInfo(bytes32)": FunctionFragment;
    "getStampInfoWithPagination(bytes32,uint256,uint256)": FunctionFragment;
    "getStampSignersCount(bytes32)": FunctionFragment;
    "getUserInfo(address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "sign(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawFee(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__TimeStamping_init"
      | "createStamp"
      | "fee"
      | "getHashesByUserAddress"
      | "getStampHashByBytes"
      | "getStampInfo"
      | "getStampInfoWithPagination"
      | "getStampSignersCount"
      | "getUserInfo"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setFee"
      | "setVerifier"
      | "sign"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__TimeStamping_init",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStamp",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      ITimeStamping.ZKPPointsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHashesByUserAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStampHashByBytes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStampInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStampInfoWithPagination",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStampSignersCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sign",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__TimeStamping_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHashesByUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStampHashByBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStampInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStampInfoWithPagination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStampSignersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StampCreated(bytes32,uint256,address[])": EventFragment;
    "StampSigned(bytes32,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StampCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StampSigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StampCreatedEventObject {
  stampHash: string;
  timestamp: BigNumber;
  signers: string[];
}
export type StampCreatedEvent = TypedEvent<
  [string, BigNumber, string[]],
  StampCreatedEventObject
>;

export type StampCreatedEventFilter = TypedEventFilter<StampCreatedEvent>;

export interface StampSignedEventObject {
  stampHash: string;
  signer: string;
}
export type StampSignedEvent = TypedEvent<
  [string, string],
  StampSignedEventObject
>;

export type StampSignedEventFilter = TypedEventFilter<StampSignedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface TimestampContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TimestampContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __TimeStamping_init(
      fee_: PromiseOrValue<BigNumberish>,
      verifier_: PromiseOrValue<string>,
      poseidonHash_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createStamp(
      stampHash_: PromiseOrValue<BytesLike>,
      isSigned_: PromiseOrValue<boolean>,
      signers_: PromiseOrValue<string>[],
      zkpPoints_: ITimeStamping.ZKPPointsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHashesByUserAddress(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getStampHashByBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStampInfo(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ITimeStamping.DetailedStampInfoStructOutput]>;

    getStampInfoWithPagination(
      stampHash_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ITimeStamping.DetailedStampInfoStructOutput]>;

    getStampSignersCount(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserInfo(
      user_: PromiseOrValue<string>,
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITimeStamping.SignerInfoStructOutput] & {
        signerInfo_: ITimeStamping.SignerInfoStructOutput;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sign(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __TimeStamping_init(
    fee_: PromiseOrValue<BigNumberish>,
    verifier_: PromiseOrValue<string>,
    poseidonHash_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createStamp(
    stampHash_: PromiseOrValue<BytesLike>,
    isSigned_: PromiseOrValue<boolean>,
    signers_: PromiseOrValue<string>[],
    zkpPoints_: ITimeStamping.ZKPPointsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getHashesByUserAddress(
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getStampHashByBytes(
    bytes_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStampInfo(
    stampHash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITimeStamping.DetailedStampInfoStructOutput>;

  getStampInfoWithPagination(
    stampHash_: PromiseOrValue<BytesLike>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ITimeStamping.DetailedStampInfoStructOutput>;

  getStampSignersCount(
    stampHash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserInfo(
    user_: PromiseOrValue<string>,
    stampHash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITimeStamping.SignerInfoStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    fee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifier(
    verifier_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sign(
    stampHash_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __TimeStamping_init(
      fee_: PromiseOrValue<BigNumberish>,
      verifier_: PromiseOrValue<string>,
      poseidonHash_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createStamp(
      stampHash_: PromiseOrValue<BytesLike>,
      isSigned_: PromiseOrValue<boolean>,
      signers_: PromiseOrValue<string>[],
      zkpPoints_: ITimeStamping.ZKPPointsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getHashesByUserAddress(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getStampHashByBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStampInfo(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITimeStamping.DetailedStampInfoStructOutput>;

    getStampInfoWithPagination(
      stampHash_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ITimeStamping.DetailedStampInfoStructOutput>;

    getStampSignersCount(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      user_: PromiseOrValue<string>,
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITimeStamping.SignerInfoStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sign(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StampCreated(bytes32,uint256,address[])"(
      stampHash?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      signers?: null
    ): StampCreatedEventFilter;
    StampCreated(
      stampHash?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      signers?: null
    ): StampCreatedEventFilter;

    "StampSigned(bytes32,address)"(
      stampHash?: PromiseOrValue<BytesLike> | null,
      signer?: PromiseOrValue<string> | null
    ): StampSignedEventFilter;
    StampSigned(
      stampHash?: PromiseOrValue<BytesLike> | null,
      signer?: PromiseOrValue<string> | null
    ): StampSignedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    __TimeStamping_init(
      fee_: PromiseOrValue<BigNumberish>,
      verifier_: PromiseOrValue<string>,
      poseidonHash_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createStamp(
      stampHash_: PromiseOrValue<BytesLike>,
      isSigned_: PromiseOrValue<boolean>,
      signers_: PromiseOrValue<string>[],
      zkpPoints_: ITimeStamping.ZKPPointsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getHashesByUserAddress(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStampHashByBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStampInfo(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStampInfoWithPagination(
      stampHash_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStampSignersCount(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInfo(
      user_: PromiseOrValue<string>,
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sign(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __TimeStamping_init(
      fee_: PromiseOrValue<BigNumberish>,
      verifier_: PromiseOrValue<string>,
      poseidonHash_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createStamp(
      stampHash_: PromiseOrValue<BytesLike>,
      isSigned_: PromiseOrValue<boolean>,
      signers_: PromiseOrValue<string>[],
      zkpPoints_: ITimeStamping.ZKPPointsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHashesByUserAddress(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStampHashByBytes(
      bytes_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStampInfo(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStampInfoWithPagination(
      stampHash_: PromiseOrValue<BytesLike>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStampSignersCount(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      user_: PromiseOrValue<string>,
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sign(
      stampHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
