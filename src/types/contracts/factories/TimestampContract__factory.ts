/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TimestampContract,
  TimestampContractInterface,
} from "../TimestampContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "stampHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "signers",
        type: "address[]",
      },
    ],
    name: "StampCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "stampHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "StampSigned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "verifier_",
        type: "address",
      },
      {
        internalType: "address",
        name: "poseidonHash_",
        type: "address",
      },
    ],
    name: "__TimeStamping_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "stampHash_",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "isSigned_",
        type: "bool",
      },
      {
        internalType: "address[]",
        name: "signers_",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
        ],
        internalType: "struct ITimeStamping.ZKPPoints",
        name: "zkpPoints_",
        type: "tuple",
      },
    ],
    name: "createStamp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user_",
        type: "address",
      },
    ],
    name: "getHashesByUserAddress",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "bytes_",
        type: "bytes",
      },
    ],
    name: "getStampHashByBytes",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "stampHash_",
        type: "bytes32",
      },
    ],
    name: "getStampInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isPublic",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usersToSign",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usersSigned",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "stampHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "address",
                name: "signer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "signatureTimestamp",
                type: "uint256",
              },
            ],
            internalType: "struct ITimeStamping.SignerInfo[]",
            name: "signersInfo",
            type: "tuple[]",
          },
        ],
        internalType: "struct ITimeStamping.DetailedStampInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "stampHash_",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "offset_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit_",
        type: "uint256",
      },
    ],
    name: "getStampInfoWithPagination",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isPublic",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usersToSign",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usersSigned",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "stampHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "address",
                name: "signer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "signatureTimestamp",
                type: "uint256",
              },
            ],
            internalType: "struct ITimeStamping.SignerInfo[]",
            name: "signersInfo",
            type: "tuple[]",
          },
        ],
        internalType: "struct ITimeStamping.DetailedStampInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "stampHash_",
        type: "bytes32",
      },
    ],
    name: "getStampSignersCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "stampHash_",
        type: "bytes32",
      },
    ],
    name: "getUserInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "signatureTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct ITimeStamping.SignerInfo",
        name: "signerInfo_",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "verifier_",
        type: "address",
      },
    ],
    name: "setVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "stampHash_",
        type: "bytes32",
      },
    ],
    name: "sign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

export class TimestampContract__factory {
  static readonly abi = _abi;
  static createInterface(): TimestampContractInterface {
    return new utils.Interface(_abi) as TimestampContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimestampContract {
    return new Contract(address, _abi, signerOrProvider) as TimestampContract;
  }
}
